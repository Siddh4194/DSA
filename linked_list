// reverse a linked list

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode dummy = new ListNode(-1);
        ListNode current = dummy;
        while(list1!=null && list2!=null){
            if(list1.val < list2.val){
                current.next = list1;
                list1 = list1.next;
            } else{
                current.next = list2;
                list2 = list2.next;
            }
            current = current.next;
        }
        if(list1 != null){
            current.next = list1;
        } else{
            current.next = list2;
        }
        return dummy.next;
    }
}




//delete a single node in the linked list
if (nodeToDelete == null || nodeToDelete.next == null) {
        // You cannot delete the last node or a null node.
        return;
    }
    
    // Copy the value of the next node into the current node
    nodeToDelete.val = nodeToDelete.next.val;
    
    // Update the current node's next pointer to skip the next node
    nodeToDelete.next = nodeToDelete.next.next;



//remove duplicates from the sorted list
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode dummy = new ListNode(-1);
        dummy.next = head;
        ListNode prev = dummy;
        ListNode current = head;
        while(current != null){
            boolean isDuplicate = false;
            while(current.next != null && current.val == current.next.val){
                current = current.next;
                isDuplicate = true;
            }
            if(isDuplicate){
                prev.next = current.next;
            } else{
                prev = prev.next;
            }
            current = current.next;
        }
        return dummy.next;
    }
}
